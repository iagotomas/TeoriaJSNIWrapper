{
  "name": "interval-coords",
  "version": "1.1.1",
  "description": "Transform simple format intervals to coordinates",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/saebekassebil/interval-coords.git"
  },
  "keywords": [
    "interval",
    "coord",
    "coordinate",
    "music",
    "theory"
  ],
  "author": {
    "name": "Jakob Miland",
    "email": "saebekassebil@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/saebekassebil/interval-coords/issues"
  },
  "homepage": "https://github.com/saebekassebil/interval-coords#readme",
  "devDependencies": {
    "tape": "^4.0.0"
  },
  "readme": "# `interval-coords`\n\nThis module makes it possible to convert music intervals in so-called \"simple format\",\ninto a coordinate in the format `[octaves, fifth]`, which represents how many\noctaves and fifths you need to \"jump\" before arriving at the interval.\n\nFor example `P1` means \"perfect unison\", and so the coordinate would be `[0, 0]`\nbecause there's no movement.\n\nAnother example, `M3` means \"major third\" and the coordinate is `[-2, 4]`.\nThis means that in order to travel a \"major third\" up, you first go 2\noctaves down, and then 4 fifths up\n\nThis way of representing intervals and notes is a powerful one, and it lets us\ntake advantage of numeric computations instead of string-parsing and long\nif/else statements\n\n## usage\n\n```js\nvar icoords = require('interval-coords');\n\nicoords('P1')   // perfect unison -> [0, 0]\nicoords('M3')   // major third -> [-2, 4]\nicoords('P8')   // perfect octave -> [1, 0]\nicoords('m13')  // minor 13th -> [4, -4]\n\n// You can also use \"negative\" intervals (going down)\nicoords('m-2')  // downwards minor second -> [-3, 5]\n```\n\n### `icoords(simpleInterval) -> [octaves, fifths]`\n\nGiven a `string` with a \"simple format\" interval, it returns the corresponding\ncoordinate vector of that interval.\n\n### \"simple format\" interval\n\nA simple interval is a string in the following format:\n\n`dd, d, m, P, M, A, AA` followed by an optional `-` sign (for negative intervals), followed by the\n`number` of the interval.\n\nNot all combinations are valid, e.g. P3 (a \"perfect third\") doesn't make sense,\nbut P4 (\"perfect fourth\") does.\n",
  "readmeFilename": "README.md",
  "_id": "interval-coords@1.1.1",
  "_from": "interval-coords@^1.1.1"
}
