{
  "name": "daccord",
  "version": "1.1.0",
  "description": "Forgiving music chord parser",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/saebekassebil/daccord.git"
  },
  "keywords": [
    "chord",
    "music",
    "teoria",
    "parser"
  ],
  "author": {
    "name": "Jakob Miland",
    "email": "saebekassebil@gmail.com",
    "url": "http://saebekassebil.me"
  },
  "license": "MIT",
  "homepage": "https://github.com/saebekassebil/daccord",
  "devDependencies": {
    "tape": "^2.13.3"
  },
  "readme": "# d'accord\n\n> D'accord, je vais analyser vos accords\n\nA simple module for parsing chord symbols, both Jazz and Classical.\nParses correctly everything from simple power chords (`D#5`) to chords you'll\noften find in the real book (`G7#5`, `Dm7b5`) to crazy chords like\n`Fsus4maj#11` or `Cm13b5#9`.\n\nNote that this module only parses the chord symbol (that is the part of the\nchord string that does *not* include the root, and thus returns relative\nintervals from which the chord can be constructed with any root.\n\n## example\n\n```js\nvar daccord = require('daccord');\n\ndaccord('m7b5') // -> ['P1', 'm3', 'd5', 'm7']\n\ndaccord('maj7') // -> ['P1', 'M3', 'P5', 'M7']\n```\n\nYou can use d'accord in combination with\n[teoria](https://github.com/saebekassebil/teoria).\nAlthough at the moment teoria includes this functionality itself this will\nhopefully get lifted out of teoria into more focused, smaller modules. But for\nnow, here's a practical example\n\n```js\nvar daccord = require('daccord');\nvar teoria = require('teoria');\n\n// Create the root note\nvar root = teoria.note('C4');\n\n// Get all the intervals (including the tonic) of a m(maj7) chord, and map them\n// into notes relative to the root, C4\ndaccord('m(maj7)').map(root.interval.bind(root)).toString() === 'c4,eb4,g4,b4';\n```\n\n## usage\n\n```js\nvar daccord = require('daccord');\n```\n\n### daccord(chordstring)\n\nReturn an array of intervals (including the tonic, that is `P1`), which\nconstitutes the full chord, with all implied intervals. If a `chordstring` is\nunparsable, an error will be *thrown* with details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/saebekassebil/daccord/issues"
  },
  "_id": "daccord@1.1.0",
  "_from": "daccord@^1.0.1"
}
